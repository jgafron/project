%import common.INT -> INT
%import common.CNAME -> ID
%import common.ESCAPED_STRING -> STRING
%import common.WS

%ignore WS  # Ignore whitespace

FILENAME: /[a-zA-Z_][a-zA-Z0-9_.-]*/ 
COM: "COM"  # Explicit marker for shell commands

?expr: command  # Allow shell commands as expressions
    | "if" expr "then" expr "else" expr -> if_exp
    | or_expr

?or_expr: or_expr "||" and_expr -> or_exp
    | and_expr

?and_expr: and_expr "&&" not_expr -> and_exp
    | not_expr

?not_expr: "!" not_expr -> not_exp
    | expr_bool

?expr_bool: expr1 comparison expr1 -> comparison_expr
    | expr1

?expr1: expr1 "+" term -> plus
    | expr1 "-" term -> minus
    | term

?term: term "*" factor -> times
    | term "/" factor -> divide
    | factor

?factor: "-" factor -> neg  # Only negates numbers, avoids treating "-l" as subtraction
    | atom

?atom: ID -> id
    | INT -> int
    | STRING -> string
    | atom "(" expr ")" -> app  # Function application
    | "(" expr ")"
    | "let" ID "=" expr "in" expr "end" -> let
    | "letfun" ID "(" ID ")" "=" expr "in" expr "end" -> letfun

?comparison: "==" -> equalop
    | "<" -> lessthan

# --------------------------
# SHELL COMMANDS (Using COM Flag)
# --------------------------
?command: pipeline

?pipeline: pipeline "|" redirection -> pipe
         | redirection

?redirection: command_base ">" ID -> redirect_out
            | command_base "<" ID -> redirect_in
            | command_base "2>" ID -> redirect_err_out
            | command_base "2<" ID -> redirect_err_in
            | command_base

?command_base: COM ID args? bg?  # Require COM before command

?arg: FILENAME
    | STRING
    | INT
    | "-" ID -> flag  # Explicitly differentiate flags from subtraction

?args: arg+


?bg: "&" -> background